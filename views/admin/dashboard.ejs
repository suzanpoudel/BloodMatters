<%- include('.././partials/navbarAdmin.ejs'); %> <%-
include('.././partials/sidemenuAdmin.ejs'); %>
<link
  href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/css/bootstrap.min.css"
  rel="stylesheet"
  integrity="sha384-Zenh87qX5JnK2Jl0vWa8Ck2rdkQ2Bzep5IDxbcnCeuOxjzrPF/et3URy9Bv1WTRi"
  crossorigin="anonymous"
/>
<link
  rel="stylesheet"
  href="https://use.fontawesome.com/releases/v5.6.3/css/all.css"
  integrity="sha384-UHRtZLI+pbxtHCWp1t77Bi1L4ZtiqrqD80Kn4Z8NTSRyMA2Fd33n5dQ8lWUE00s/"
  crossorigin="anonymous"
/>

<!-- Timer script -->
<script src="//cdnjs.cloudflare.com/ajax/libs/jquery/3.2.1/jquery.min.js"></script>
<script>
  (function ($) {
    $.fn.countTo = function (options) {
      options = options || {};

      return $(this).each(function () {
        // set options for current element
        var settings = $.extend(
          {},
          $.fn.countTo.defaults,
          {
            from: $(this).data("from"),
            to: $(this).data("to"),
            speed: $(this).data("speed"),
            refreshInterval: $(this).data("refresh-interval"),
            decimals: $(this).data("decimals"),
          },
          options
        );

        // how many times to update the value, and how much to increment the value on each update
        var loops = Math.ceil(settings.speed / settings.refreshInterval),
          increment = (settings.to - settings.from) / loops;

        // references & variables that will change with each update
        var self = this,
          $self = $(this),
          loopCount = 0,
          value = settings.from,
          data = $self.data("countTo") || {};

        $self.data("countTo", data);

        // if an existing interval can be found, clear it first
        if (data.interval) {
          clearInterval(data.interval);
        }
        data.interval = setInterval(updateTimer, settings.refreshInterval);

        // initialize the element with the starting value
        render(value);

        function updateTimer() {
          value += increment;
          loopCount++;

          render(value);

          if (typeof settings.onUpdate == "function") {
            settings.onUpdate.call(self, value);
          }

          if (loopCount >= loops) {
            // remove the interval
            $self.removeData("countTo");
            clearInterval(data.interval);
            value = settings.to;

            if (typeof settings.onComplete == "function") {
              settings.onComplete.call(self, value);
            }
          }
        }

        function render(value) {
          var formattedValue = settings.formatter.call(self, value, settings);
          $self.html(formattedValue);
        }
      });
    };

    $.fn.countTo.defaults = {
      from: 0, // the number the element should start at
      to: 0, // the number the element should end at
      speed: 1000, // how long it should take to count between the target numbers
      refreshInterval: 100, // how often the element should be updated
      decimals: 0, // the number of decimal places to show
      formatter: formatter, // handler for formatting the value before rendering
      onUpdate: null, // callback method for every time the element is updated
      onComplete: null, // callback method for when the element finishes updating
    };

    function formatter(value, settings) {
      return value.toFixed(settings.decimals);
    }
  })(jQuery);

  jQuery(function ($) {
    // custom formatting example
    $(".count-number").data("countToOptions", {
      formatter: function (value, options) {
        return value
          .toFixed(options.decimals)
          .replace(/\B(?=(?:\d{3})+(?!\d))/g, ",");
      },
    });

    // start all the timers
    $(".timer").each(count);

    function count(options) {
      var $this = $(this);
      options = $.extend({}, options || {}, $this.data("countToOptions") || {});
      $this.countTo(options);
    }
  });
</script>

<main>
  <div class="px-4 py-5 my-5 text-center">
    <div class="container-fluid px-4">
      <%- include('.././partials/messages.ejs'); %>
      <div class="row g-3 my-2">
          <div class="col-md-3">
              <div class="p-3 bg-white shadow-sm d-flex justify-content-around align-items-center rounded">
                  <div>
                      <h3 class="timer fs-2" data-to="<%=userCount%>" data-speed="1500"></h3>
                      <p class="fs-5">Users</p>
                  </div>
                  <i class="fas fa-user fs-1 text-danger-custom border rounded-full secondary-bg p-3"></i>
              </div>
          </div>

          <div class="col-md-3">
              <div class="p-3 bg-white shadow-sm d-flex justify-content-around align-items-center rounded">
                  <div>
                    <h3 class="timer fs-2" data-to="<%=activityCount%>" data-speed="1500"></h3>
                      <p class="fs-5">Interactions</p>
                  </div>
                  <i
                      class="fas fa-user-group fs-1 text-danger-custom border rounded-full secondary-bg p-3"></i>
              </div>
          </div>

          <div class="col-md-3">
              <div class="p-3 bg-white shadow-sm d-flex justify-content-around align-items-center rounded">
                  <div>
                    <h3 class="timer fs-2" data-to="<%=bloodBankCount%>" data-speed="1500"></h3>
                      <p class="fs-5">Blood Banks</p>
                  </div>
                  <i class="fas fa-vault fs-1 text-danger-custom border rounded-full secondary-bg p-3"></i>
              </div>
          </div>

          <div class="col-md-3">
              <div class="p-3 bg-white shadow-sm d-flex justify-content-around align-items-center rounded">
                  <div>
                    <h3 class="timer fs-2" data-to="<%=postCount%>" data-speed="1500"></h3>
                      <p class="fs-5">Posts</p>
                  </div>
                  <i class="fas fa-address-card fs-1 text-danger-custom border rounded-full secondary-bg p-3"></i>
              </div>
          </div>
      </div>
      <hr>
      <div class="d-flex m-auto justify-content-around align-content-center mt-5">
        <div class="col-6">
          <h3 class="mt-5 mb-4">User Donate/Request Activity</h3>
          <canvas id="barGraph"></canvas>
        </div>
        <div class="col-3">
          <h3 class="mt-5 mb-4">Blood Group Count</h3>
          <canvas id="pieChart"></canvas>
        </div>
      </div>
      <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
      <!-- <script src="../../public/chart.js" type="module"></script> -->
      <script>
        const pieChart = document.getElementById('pieChart');
      new Chart(pieChart, {
        type: 'doughnut',
        data: {
          labels: <%- JSON.stringify(bloodGrpLabels) %>,
       datasets: [{
        label: 'Count',
        data: <%- JSON.stringify(bloodGrpCount) %>,
        backgroundColour : [
            "rgb(52, 152, 219)",
            "rgb(87, 189, 142)",
            "rgb(222, 50, 133)",
            "rgb(236, 97, 35)",
            "rgb(154, 205, 50)",
            "rgb(252, 164, 29)",
            "rgb(59, 113, 199)",
            "rgb(240, 84, 36)"
          ],
        hoverOffset: 4
            }]
      },
      options: {
        responsive : true
      }
    });

    const barGraph = document.getElementById('barGraph');
    new Chart(barGraph, {
      type: 'bar',
      data: {
        labels: <%- JSON.stringify(activityStatusLabels) %>,
     datasets: [{
      label: 'Count',
      data: <%- JSON.stringify(activityStatusCount) %>,
      backgroundColour : [
          "rgb(52, 152, 219)",
          "rgb(87, 189, 142)",
          "rgb(222, 50, 133)",
          "rgb(236, 97, 35)",
          "rgb(154, 205, 50)",
          "rgb(252, 164, 29)",
          "rgb(59, 113, 199)",
          "rgb(240, 84, 36)"  
        ],
        borderColor: [
            'rgb(255, 99, 132)',
            'rgb(255, 159, 64)',
            'rgb(255, 205, 86)',
            'rgb(75, 192, 192)',
            'rgb(54, 162, 235)',
            'rgb(153, 102, 255)',
            'rgb(201, 203, 207)'
        ],
        borderWidth: 3,
        hoverOffset: 4
    }]
},
    options: {
      responsive : true
    }
  });

      </script>
  </div>
</main>
